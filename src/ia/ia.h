/*
    ID gruppo : 51

    886711 Passarella-Diego | 882082 Pasqual-Davide | 881493 Ravagnan-Michelle

 */
#ifndef IA_H
#define IA_H

/**
 * @brief Auxiliary struct for the minimax.<br>
 * 
 * In order to improve the efficiency of the minimax function we preferred to create a new struct instead of calling another function similar to minimax.<br>
 * 
 * @param value Evaluated score of the minimax or -9017 if the pawn is blocked.
 * @param directions Array containing the string of the direction.
 */
typedef struct valueMinimax valueMinimax_t;

/**
 * @brief Move the player randomly.
 * 
 * @param players Pointer to players array.
 * @param board Pointer to the board.
 * @param nPl Number of the player to move.
 * @return unsigned int Return 2 if there are errors, 4 otherwise.
 */
unsigned int round_ia_random(player_t *players, board_t *board, unsigned int nPl);

/**
 * @brief Simplify the pawn selection in the random when there is only 1 pawn left.
 * 
 * @param players Pointer to players array.
 * @param nPl Number of the player to move.
 * @return int Return the pawn number, -1 otherwise.
 */
int last_move(player_t *players,unsigned int nPl);

/**
 * @brief Move the player using the minimax algorithm.
 * 
 * @param players Pointer to players array.
 * @param board Pointer to the board.
 * @param nPl Number of the player to move.
 * @param depth Depth of the tree generated by the minimax.
 * @return int Return 2 if there are errors, 4 otherwise.
 */
int round_ia_minimax(player_t *players, board_t *board,unsigned int nPl, unsigned int depth);

/**
 * @brief Algorithm which computes the best move possible for a player.
 * 
 * @param board Instance of the board.
 * @param players Pointer to players array.
 * @param depth Depth of the tree generated by the minimax.
 * @param nPed Number of the pawn to calculate the move.
 * @param nPl Number of the player.
 * @param v Pointer to an element of the valueMinimax array.
 * @param cheat Determines the selection of the min value or max value in that level of the graph.
 * @param alpha Min value of the player 1 can reach.
 * @param beta Max value of the player 2 can reach.
 * @return int Return the evaluated score.
 */
int minimax(board_t board, player_t *players, int depth,unsigned int nPed, unsigned int nPl, valueMinimax_t *v, int cheat,int *alpha,int *beta);

/**
 * @brief Synthesizes some operations in the minimax.
 * 
 * @param board_copy Pointer to a copy of a board.
 * @param players_copy Pointer to a copy of players array.
 * @param depth Depth of the tree generated by the minimax.
 * @param nPed Number of the pawn to calculate the move.
 * @param nPl Number of the player.
 * @param v Pointer to an element of the valueMinimax array.
 * @param str Direction considerated by the minimax.
 * @param maxEval Compare the score of this call with the others.
 * @param cheat Determines the selection of the min value or max value in that level of the graph.
 * @param alpha Min value of the player 1 can reach.
 * @param beta Max value of the player 2 can reach.
 * @return int Return the max value or the min value based on the cheat flag.
 */
int call_minimax(board_t *board_copy, player_t *players_copy,unsigned int depth, unsigned int nPed,unsigned int nPl,valueMinimax_t *v,char *str,int maxEval, int cheat,int *alpha,int *beta);

/**
 * @brief Compare alpha and beta.
 * 
 * @param alpha Min value of the player 1 can reach.
 * @param beta Max value of the player 2 can reach.
 * @return unsigned int Return 0 if alpha or beta are inf or alpha < beta, 1 otherwise. 
 */
unsigned int interrupt_minimax(int *alpha ,int *beta);

/**
 * @brief Calculate the score of the board.
 * 
 * @param board Instance of the board.
 * @param players Pointer to players array.
 * @return int Return the score.
 */
int evaluate_score(board_t board, player_t *players);

/**
 * @brief Print minimax results.
 * 
 * @param value_arr Pointer to valueMinimax array.
 * @param dim_arr Dimension of the valueMinimax array.
 */
void print_minimax(valueMinimax_t *value_arr, unsigned int dim_arr);

/**
 * @brief Calculate the max value among all previous results.
 * 
 * @param arr Pointer to valueMinimax array.
 * @param dim Dimension of the valueMinimax array.
 * @return unsigned int Return the index of the array containing the max value.
 */
unsigned int max(valueMinimax_t *arr,unsigned int dim);

/**
 * @brief Deallocate all allocated memory by round_ia_minimax.
 * 
 * @param arr Pointer to valueMinimax array.
 * @param dim Dimension of the valueMinimax array.
 */
void destroy_value_minimax(valueMinimax_t *arr,unsigned int dim);

#endif