Index: supporto.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#include<stdio.h>\r\n#include<stdlib.h>\r\n#include\"supporto.h\"\r\n#include<string.h>\r\n#include<time.h>\r\n#include <math.h>\r\ntcampo *crea_campo(unsigned int r,unsigned int col,unsigned int cifre){\r\n    tcampo *t;\r\n\r\n    t = (tcampo*)malloc(sizeof(tcampo));\r\n\r\n    if(t != NULL){\r\n        unsigned int i;\r\n        t->r = r;\r\n        t->c = col*cifre;\r\n        t->mat = (char**)malloc(sizeof(char*)*(t->r));\r\n        for(i = 0 ; i < t->r ; ++i){\r\n            t->mat[i] = (char*)malloc(sizeof(char)*(t->c));\r\n\r\n        }\r\n\r\n        return t;\r\n\r\n    }else{\r\n        printf(\"Errore nella malloc nella funzione crea_campo\\n\");\r\n        return NULL;\r\n    }\r\n}\r\nvoid inizializza_campo(tcampo *t,unsigned int cifre){\r\n    unsigned int i,j;\r\n\r\n    for(i = 0 ; i < t->r ; ++i) {\r\n        for (j = 0; j < t->c; j += cifre) {\r\n\r\n            if (((j / cifre) + i) % 2 == 0) {\r\n                int z;\r\n                for (z = 0; z < cifre; ++z) {\r\n                    t->mat[i][j+z] = '#';\r\n                }\r\n\r\n            } else {\r\n                int z;\r\n                for (z = 0; z < cifre; ++z) {\r\n                    t->mat[i][j+z] = ' ';\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\nvoid stampa_campo(tcampo t,unsigned int cifre){\r\n    unsigned int i,j;\r\n\r\n\r\n    for(j=0; j<t.c; j +=cifre)\r\n    {\r\n        int z;\r\n        for(z = 0 ; z < cifre ; ++z){\r\n            printf(\"-\");\r\n        }\r\n        printf(\"---\");\r\n    }\r\n    printf(\"-\");/* recupero angolo dx */\r\n\r\n    printf(\"\\n\");\r\n\r\n    /* parte centrale */\r\n    for(i= 0; i < t.r; ++i)\r\n    {\r\n        for(j=0; j<t.c; j +=cifre)\r\n        {\r\n            int z;\r\n            if (t.mat[i][j+2] == 'N'){\r\n                for(z = 0 ; z < cifre; ++z){\r\n                    if(z == 0){\r\n                        printf(\"| \");\r\n                        setRed();\r\n                        printf(\"%c\",t.mat[i][j]);\r\n                    }else{\r\n                        if(z == cifre-1){\r\n                            setRed();\r\n                            printf(\"%c \",t.mat[i][j+z]);\r\n                        }else{\r\n                            setRed();\r\n                            printf(\"%c\",t.mat[i][j+z]);\r\n                        }\r\n                    }\r\n                    resetColor();\r\n                }               \r\n            }else if (t.mat[i][j+2] == 'B')\r\n            {\r\n                for(z = 0 ; z < cifre; ++z){\r\n                    if(z == 0){\r\n                        printf(\"| \");\r\n                        setYellow();\r\n                        printf(\"%c\",t.mat[i][j]);\r\n                    }else{\r\n                        if(z == cifre-1){\r\n                            setYellow();\r\n                            printf(\"%c \",t.mat[i][j+z]);\r\n                        }else{\r\n                            setYellow();\r\n                            printf(\"%c\",t.mat[i][j+z]);\r\n                        }\r\n                    }\r\n                    resetColor();\r\n                }    \r\n            }\r\n            else{\r\n                for(z = 0 ; z < cifre; ++z){\r\n                    if(z == 0){\r\n                        printf(\"| %c\",t.mat[i][j]);\r\n                    }else{\r\n                        if(z == cifre-1){\r\n                            printf(\"%c \",t.mat[i][j+z]);\r\n                        }else{\r\n                            printf(\"%c\",t.mat[i][j+z]);\r\n                        }\r\n                    }\r\n                }\r\n                \r\n            }\r\n            \r\n            \r\n        }\r\n\r\n        printf(\"|\\n\");\r\n        if(i != t.r-1)\r\n        {\r\n            printf(\"|\");\r\n            for(j=0; j<t.c; j +=cifre)\r\n            {\r\n                if(j != 0){\r\n                    int z;\r\n                    for(z = 0 ; z < cifre ; ++z){\r\n                        printf(\"-\");\r\n                    }\r\n                    printf(\"---\");\r\n                }else{\r\n                    int z;\r\n                    for(z = 1 ; z < cifre ; ++z){\r\n                        printf(\"-\");\r\n                    }\r\n                    printf(\"---\");\r\n                }\r\n\r\n            }\r\n            printf(\"|\\n\");\r\n        }\r\n    }\r\n\r\n\r\n    /* e infine la base*/\r\n\r\n    for(j=0; j<t.c; j +=cifre)\r\n    {\r\n        int z;\r\n        for(z = 0 ; z < cifre ; ++z){\r\n            printf(\"-\");\r\n        }\r\n        printf(\"---\");\r\n    }\r\n    printf(\"-\");/* recupero angolo dx */\r\n\r\n    printf(\"\\n\");\r\n\r\n}\r\nvoid stampa_campo_inv(tcampo t,unsigned int cifre){\r\n    unsigned int j;\r\n    int i;\r\n\r\n    for(j=0; j<t.c; j +=cifre)\r\n    {\r\n        int z;\r\n        for(z = 0 ; z < cifre ; ++z){\r\n            printf(\"-\");\r\n        }\r\n        printf(\"---\");\r\n    }\r\n    printf(\"-\");/* recupero angolo dx */\r\n\r\n    printf(\"\\n\");\r\n\r\n    /* parte centrale */\r\n    for(i= t.r-1; i > -1 ; --i)\r\n    {\r\n        for(j=0; j<t.c; j +=cifre)\r\n        {\r\n            int z;\r\n            if (t.mat[i][j+2] == 'N'){\r\n                for(z = 0 ; z < cifre; ++z){\r\n                    if(z == 0){\r\n                        printf(\"| \");\r\n                        setRed();\r\n                        printf(\"%c\",t.mat[i][j]);\r\n                    }else{\r\n                        if(z == cifre-1){\r\n                            setRed();\r\n                            printf(\"%c \",t.mat[i][j+z]);\r\n                        }else{\r\n                            setRed();\r\n                            printf(\"%c\",t.mat[i][j+z]);\r\n                        }\r\n                    }\r\n                    resetColor();\r\n                }               \r\n            }else if (t.mat[i][j+2] == 'B')\r\n            {\r\n                for(z = 0 ; z < cifre; ++z){\r\n                    if(z == 0){\r\n                        printf(\"| \");\r\n                        setYellow();\r\n                        printf(\"%c\",t.mat[i][j]);\r\n                    }else{\r\n                        if(z == cifre-1){\r\n                            setYellow();\r\n                            printf(\"%c \",t.mat[i][j+z]);\r\n                        }else{\r\n                            setYellow();\r\n                            printf(\"%c\",t.mat[i][j+z]);\r\n                        }\r\n                    }\r\n                    resetColor();\r\n                }    \r\n            }\r\n            else{\r\n                for(z = 0 ; z < cifre; ++z){\r\n                    if(z == 0){\r\n                        printf(\"| %c\",t.mat[i][j]);\r\n                    }else{\r\n                        if(z == cifre-1){\r\n                            printf(\"%c \",t.mat[i][j+z]);\r\n                        }else{\r\n                            printf(\"%c\",t.mat[i][j+z]);\r\n                        }\r\n                    }\r\n                }\r\n                \r\n            }\r\n        }\r\n\r\n        printf(\"|\\n\");\r\n        if(i != 0)\r\n        {\r\n            printf(\"|\");\r\n            for(j=0; j<t.c; j +=cifre)\r\n            {\r\n                if(j != 0){\r\n                    int z;\r\n                    for(z = 0 ; z < cifre ; ++z){\r\n                        printf(\"-\");\r\n                    }\r\n                    printf(\"---\");\r\n                }else{\r\n                    int z;\r\n                    for(z = 1 ; z < cifre ; ++z){\r\n                        printf(\"-\");\r\n                    }\r\n                    printf(\"---\");\r\n                }\r\n\r\n            }\r\n            printf(\"|\\n\");\r\n        }\r\n    }\r\n\r\n\r\n    /* e infine la base*/\r\n\r\n    for(j=0; j<t.c; j +=cifre)\r\n    {\r\n        int z;\r\n        for(z = 0 ; z < cifre ; ++z){\r\n            printf(\"-\");\r\n        }\r\n        printf(\"---\");\r\n    }\r\n    printf(\"-\");/* recupero angolo dx */\r\n\r\n    printf(\"\\n\");\r\n\r\n}\r\ntplayer *crea_pedine(unsigned int n,char ped,unsigned int np,unsigned int cifre,tcampo t){\r\n    tplayer *p;\r\n    unsigned int h;\r\n\r\n    p = (tplayer*)malloc(sizeof(tplayer));\r\n    p->arr = (tpedina*)malloc(sizeof(tpedina)*n);\r\n    for(h = 0 ; h < n ; ++h){\r\n        p->arr[h].et = (char*)malloc(sizeof(char)*(3+cifre));\r\n    }\r\n    if( (p != NULL) && (p->arr != NULL)){\r\n        unsigned int i,nr,nc = 0;\r\n        int c = -1;\r\n\r\n        if(np == 1){\r\n            nr = t.r-1;\r\n            while(c == -1){\r\n                if(t.mat[nr][nc] == '#'){\r\n                    c = nc;\r\n                }\r\n                ++nc;\r\n            }\r\n            nc = c ;\r\n        }else{\r\n            nr = 0;\r\n            while(c == -1){\r\n                if(t.mat[nr][nc] == '#'){\r\n                    c = nc;\r\n                }\r\n                ++nc;\r\n            }\r\n            nc = c ;\r\n        }\r\n\r\n        for(i = 0 ; i < n ; ++i){\r\n            p->arr[i].et[0] = ' ';\r\n            p->arr[i].et[1] = ' ' ;\r\n            p->arr[i].et[2] = ped ;\r\n            if(i < 10){\r\n                unsigned int z;\r\n                for(z = 3 ; z < (3+cifre)-1 ; ++z){\r\n                    p->arr[i].et[z] = '0';\r\n                }\r\n                p->arr[i].et[(3+cifre)-1] = '0'+i;\r\n            }else {\r\n                unsigned int x = 1, f = 3, z,m = i;\r\n                z = cifre-1;\r\n                x = pow(10,z);\r\n                for(f = 3 ; f < 3+cifre ; ++f){\r\n                    unsigned int div = m/x;\r\n                    if (div > 0) {\r\n                        p->arr[i].et[f] = '0' + div;\r\n                    } else {\r\n                        p->arr[i].et[f] = '0';\r\n                    }\r\n                    m -= x *div ;\r\n                    --z;\r\n                    x = pow(10,z);\r\n                }\r\n            }\r\n            p->arr[i].dim = cifre;\r\n            p->arr[i].app = ped;\r\n            p->arr[i].cima = 1 ;\r\n            p->arr[i].numero = i ;\r\n            p->arr[i].grado = 1 ;\r\n            p->arr[i].r = nr;\r\n            p->arr[i].c = nc;\r\n            if(np == 1){\r\n                if((nc+((3+cifre)*2) < t.c) && (nc+((3+cifre)*2) > 0)){\r\n                    nc +=((3+cifre)*2);\r\n                }else{\r\n                    --nr;\r\n                    if( c == 0){\r\n                        c = (3+cifre) ;\r\n                        nc = (3+cifre);\r\n                    }else{\r\n                        c = 0;\r\n                        nc = 0;\r\n                    }\r\n                }\r\n            }else{\r\n                if((nc+((3+cifre)*2) < t.c) && (nc+((3+cifre)*2) > 0)){\r\n                    nc +=((3+cifre)*2);\r\n                }else{\r\n                    ++nr;\r\n                    if( c == 0){\r\n                        c = (3+cifre) ;\r\n                        nc = (3+cifre);\r\n                    }else{\r\n                        c = 0;\r\n                        nc = 0;\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n        }\r\n        p->dim = n;\r\n        return p;\r\n    }else{\r\n        printf(\"Errore malloc funzione crea_pedine\\n\");\r\n        return NULL;\r\n    }\r\n}\r\n\r\nvoid stampa_player(tplayer p){\r\n    unsigned int i,j;\r\n    for(i = 0 ; i < p.dim ; ++i){\r\n\r\n        printf(\"Pedina = \");\r\n        for(j = 0 ; j < 3+p.arr[i].dim ;++j ){\r\n            printf(\"%c\",p.arr[i].et[j]);\r\n        }\r\n        printf(\"\\n\");\r\n        printf(\"Cima = %d\\n\",p.arr[i].cima);\r\n        printf(\"Numero pedina : %d \\n\",p.arr[i].numero);\r\n        printf(\"Grado pedina : %d \\n\",p.arr[i].grado);\r\n        printf(\"Posizione nel campo x e y : %d , %d\\n\",p.arr[i].r,p.arr[i].c );\r\n        printf(\"\\n\");\r\n    }\r\n}\r\n\r\nvoid aggiorna_campo(tcampo *t,tplayer p1,tplayer p2){\r\n    unsigned int i;\r\n    for(i = 0 ; i < p1.dim ; ++i){\r\n        if(p1.arr[i].grado > 0){\r\n            unsigned int j;\r\n            for(j = 0 ; j < 3+p1.arr[i].dim ; ++j){\r\n                t->mat[p1.arr[i].r][p1.arr[i].c+j] = p1.arr[i].et[j];\r\n            }\r\n        }\r\n    }\r\n\r\n    for(i= 0 ; i < p2.dim ; ++i){\r\n        if(p2.arr[i].grado > 0){\r\n            unsigned int j;\r\n            for(j = 0 ; j < 3+p2.arr[i].dim ; ++j){\r\n                t->mat[p2.arr[i].r][p2.arr[i].c+j] = p2.arr[i].et[j];\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nunsigned int is_pedina(tcampo t,unsigned int r,unsigned int c,unsigned int cifre){\r\n    int i,flag = 0;\r\n    for(i = 0 ; i < cifre ; ++i){\r\n        (t.mat[r][c+i] != ' ')&&(t.mat[r][c+i] != '#') ? flag = 1 : flag;\r\n    }\r\n    return flag;\r\n}\r\nvoid togli_pedina(tcampo *t,unsigned int r,unsigned int c,unsigned cifre){\r\n    unsigned int x = r , y = c,i;\r\n    for(i = 0 ; i < cifre ; ++i){\r\n        if(((y/cifre)+x)%2 == 0){\r\n            t->mat[r][c+i] = '#';\r\n        }else{\r\n            t->mat[r][c+i] = ' ';\r\n        }\r\n    }\r\n}\r\nvoid aggiungi_pedina(tplayer *p,unsigned int np,char ped){\r\n    if(p->arr[np].grado < 3){\r\n        p->arr[np].et[p->arr[np].cima] = ped;\r\n        --p->arr[np].cima;\r\n        ++p->arr[np].grado;\r\n    }else{\r\n        p->arr[np].et[2] = ped;\r\n    }\r\n}\r\nunsigned int ricerca_pl(tplayer p1,tplayer p2,unsigned int x,unsigned int y){\r\n    int i,flag = 0;\r\n    for(i = 0 ; i < p1.dim ; ++i){\r\n        if((p1.arr[i].r == x)&&(p1.arr[i].c == y)){\r\n            flag = 1;\r\n        }\r\n    }\r\n    if(flag){\r\n        return 1;\r\n    }else{\r\n        for(i = 0 ; i < p2.dim ; ++i){\r\n            if((p2.arr[i].r == x)&&(p2.arr[i].c == y)){\r\n                flag = 2;\r\n            }\r\n        }\r\n    }\r\n    return flag;\r\n}\r\nunsigned int convert(tcampo t,unsigned int r,unsigned int c,unsigned int dim){\r\n    unsigned int i,num = 0,z = 0;\r\n\r\n    for(i = dim ; i > dim-1 ; --i){\r\n        num += (t.mat[r][c]-'0')*pow(10,z);\r\n        z++;\r\n\r\n    }\r\n\r\n    return num;\r\n}\r\n\r\nunsigned int mangia_p1(tplayer *p1,tplayer *p2,char *str,unsigned np,tcampo t){\r\n\r\n    if(!strcmp(str,\"sx\")){\r\n        int x,y,z;\r\n        x = p1->arr[np].r-1;\r\n        y = p1->arr[np].c-(p1->arr[np].dim+3);\r\n        z = ricerca_pl(*p1,*p2,x,y);\r\n        if((z == 1) || (!z)){\r\n            return 0;\r\n        }else{\r\n            unsigned int num;\r\n            num = convert(t,p1->arr[np].r-1,p1->arr[np].c-1,2+p1->arr[np].dim);\r\n            if(p1->arr[np].grado < 3){\r\n                p1->arr[np].et[p1->arr[np].cima] = p2->arr[num].et[p2->arr[num].cima+1];\r\n                --p1->arr[np].cima;\r\n                p1->arr[np].grado++;\r\n                p2->arr[num].cima++;\r\n                --p2->arr[num].grado;\r\n                p2->arr[num].et[p2->arr[num].cima]= ' ';\r\n                p1->arr[np].r -= 2;\r\n                p1->arr[np].c -= (p1->arr[np].dim+3)*2;\r\n\r\n            }else{\r\n                char c;\r\n                c = p2->arr[num].et[p2->arr[num].cima+1];\r\n                aggiungi_pedina(p1,np,c);\r\n                p2->arr[num].cima++;\r\n                --p2->arr[num].grado;\r\n                p2->arr[num].et[p2->arr[num].cima]= ' ';\r\n                p1->arr[np].r -= 2;\r\n                p1->arr[np].c -= (p1->arr[np].dim+3)*2;\r\n            }\r\n            if(p2->arr[num].grado == 0){\r\n                togli_pedina(&t,p1->arr[np].r+1,p1->arr[np].c+(p1->arr[np].dim+3),p1->arr[np].dim+3);\r\n\r\n            }\r\n            togli_pedina(&t,p1->arr[np].r+2,p1->arr[np].c+(p1->arr[np].dim+3)*2,p1->arr[np].dim+3);\r\n            return 1;\r\n        }\r\n\r\n    }\r\n    if(!strcmp(str,\"dx\")){\r\n        int x,y,z;\r\n        x = p1->arr[np].r-1;\r\n        y = p1->arr[np].c+(p1->arr[np].dim+3);\r\n        z = ricerca_pl(*p1,*p2,x,y);\r\n        if((z == 1) || (!z)){\r\n            return 0;\r\n        }else{\r\n            unsigned int num;\r\n            num = convert(t,p1->arr[np].r-1,p1->arr[np].c+((p1->arr[np].dim+3)*2-1),2+p1->arr[np].dim);\r\n            printf(\"num %u\\n\",num);\r\n            if(p1->arr[np].grado < 3){\r\n                p1->arr[np].et[p1->arr[np].cima] = p2->arr[num].et[p2->arr[num].cima+1];\r\n                --p1->arr[np].cima;\r\n                p1->arr[np].grado++;\r\n                p2->arr[num].cima++;\r\n                --p2->arr[num].grado;\r\n                p2->arr[num].et[p2->arr[num].cima]= ' ';\r\n                p1->arr[np].r -= 2;\r\n                p1->arr[np].c += (p1->arr[np].dim+3)*2;\r\n\r\n            }else{\r\n                char c;\r\n                c = p2->arr[num].et[p2->arr[num].cima+1];\r\n                aggiungi_pedina(p1,np,c);\r\n                p2->arr[num].cima++;\r\n                --p2->arr[num].grado;\r\n                p2->arr[num].et[p2->arr[num].cima]= ' ';\r\n                p1->arr[np].r -= 2;\r\n                p1->arr[np].c += (p1->arr[np].dim+3)*2;\r\n            }\r\n            if(p2->arr[num].grado == 0){\r\n                togli_pedina(&t,p1->arr[np].r+1,p1->arr[np].c-(p1->arr[np].dim+3),(p1->arr[np].dim+3));\r\n\r\n            }\r\n            togli_pedina(&t,p1->arr[np].r+2,p1->arr[np].c-(p1->arr[np].dim+3)*2,(p1->arr[np].dim+3));\r\n            return 1;\r\n        }\r\n\r\n    }\r\n    if(!strcmp(str,\"bassodx\")){\r\n        int x,y,z;\r\n        x = p1->arr[np].r+1;\r\n        y = p1->arr[np].c+(p1->arr[np].dim+3);\r\n        z = ricerca_pl(*p1,*p2,x,y);\r\n        if((z == 1) || (!z)){\r\n            return 0;\r\n        }else{\r\n            unsigned int num;\r\n            num = convert(t,p1->arr[np].r+1,p1->arr[np].c+((p1->arr[np].dim+3)*2-1),2+p1->arr[np].dim);\r\n            if(p1->arr[np].grado < 3){\r\n                p1->arr[np].et[p1->arr[np].cima] = p2->arr[num].et[p2->arr[num].cima+1];\r\n                --p1->arr[np].cima;\r\n                p1->arr[np].grado++;\r\n                p2->arr[num].cima++;\r\n                --p2->arr[num].grado;\r\n                p2->arr[num].et[p2->arr[num].cima]= ' ';\r\n                p1->arr[np].r += 2;\r\n                p1->arr[np].c += (p1->arr[np].dim+3)*2;\r\n\r\n            }else{\r\n                char c;\r\n                c = p2->arr[num].et[p2->arr[num].cima+1];\r\n                aggiungi_pedina(p1,np,c);\r\n                p2->arr[num].cima++;\r\n                --p2->arr[num].grado;\r\n                p2->arr[num].et[p2->arr[num].cima]= ' ';\r\n                p1->arr[np].r += 2;\r\n                p1->arr[np].c += (p1->arr[np].dim+3)*2;\r\n            }\r\n            if(p2->arr[num].grado == 0){\r\n                togli_pedina(&t,p1->arr[np].r-1,p1->arr[np].c-(p1->arr[np].dim+3),(p1->arr[np].dim+3));\r\n\r\n            }\r\n            togli_pedina(&t,p1->arr[np].r-2,p1->arr[np].c-(p1->arr[np].dim+3)*2,(p1->arr[np].dim+3));\r\n            return 1;\r\n        }\r\n\r\n    }\r\n    if(!strcmp(str,\"bassosx\")){\r\n        int x,y,z;\r\n        x = p1->arr[np].r+1;\r\n        y = p1->arr[np].c-(p1->arr[np].dim+3);\r\n        z = ricerca_pl(*p1,*p2,x,y);\r\n        if((z == 1) || (!z)){\r\n            return 0;\r\n        }else{\r\n\r\n            unsigned int num;\r\n            num = convert(t,p1->arr[np].r+1,p1->arr[np].c-1,2+p1->arr[np].dim);\r\n            if(p1->arr[np].grado < 3){\r\n                p1->arr[np].et[p1->arr[np].cima] = p2->arr[num].et[p2->arr[num].cima+1];\r\n                --p1->arr[np].cima;\r\n                p1->arr[np].grado++;\r\n                p2->arr[num].cima++;\r\n                --p2->arr[num].grado;\r\n                p2->arr[num].et[p2->arr[num].cima]= ' ';\r\n                p1->arr[np].r += 2;\r\n                p1->arr[np].c -= (p1->arr[np].dim+3)*2;\r\n\r\n            }else{\r\n                char c;\r\n                c = p2->arr[num].et[p2->arr[num].cima+1];\r\n                aggiungi_pedina(p1,np,c);\r\n                p2->arr[num].cima++;\r\n                --p2->arr[num].grado;\r\n                p2->arr[num].et[p2->arr[num].cima]= ' ';\r\n                p1->arr[np].r += 2;\r\n                p1->arr[np].c -= (p1->arr[np].dim+3)*2;\r\n            }\r\n            if(p2->arr[num].grado == 0){\r\n                togli_pedina(&t,p1->arr[np].r-1,p1->arr[np].c+(p1->arr[np].dim+3),(p1->arr[np].dim+3));\r\n\r\n            }\r\n            togli_pedina(&t,p1->arr[np].r-2,p1->arr[np].c+(p1->arr[np].dim+3)*2,(p1->arr[np].dim+3));\r\n            return 1;\r\n        }\r\n\r\n    }\r\n    return 0;\r\n}\r\nunsigned int sposta_p1 (tplayer *p1,unsigned int np,char *str,tcampo *t,tplayer *p2){\r\n    if(!strcmp(str,\"dx\")){\r\n        if(is_pedina(*t,p1->arr[np].r-1,p1->arr[np].c+(p1->arr[np].dim+3),(p1->arr[np].dim+3)*2)){\r\n            if((p1->arr[np].r-2 >= 0)&&(p1->arr[np].r-2<t->r)&&(p1->arr[np].c+((p1->arr[np].dim+3)*3-1) >= 0)&&(p1->arr[np].c+(p1->arr[np].dim+3)*3-1)< t->c){\r\n                if(!is_pedina(*t,p1->arr[np].r-2,p1->arr[np].c+((p1->arr[np].dim+3)*2),(p1->arr[np].dim+3))){\r\n                    mangia_p1(p1,p2,str,np,*t);\r\n                    return 1;\r\n                }else{\r\n                    return 0;\r\n                }\r\n            }else{\r\n                return 0;\r\n            }\r\n        }else{\r\n            if((p1->arr[np].r-1 >= 0)&&(p1->arr[np].r-1<t->r)&&(p1->arr[np].c+(p1->arr[np].dim+3) >= 0)&&(p1->arr[np].c+(p1->arr[np].dim+3) < t->c)){\r\n                togli_pedina(t,p1->arr[np].r,p1->arr[np].c,(p1->arr[np].dim+3));\r\n                --p1->arr[np].r;\r\n                p1->arr[np].c += (p1->arr[np].dim+3);\r\n                if(p1->arr[np].r == 0){\r\n                    aggiungi_pedina(p1,np,p1->arr[np].app);\r\n                }\r\n                return 1;\r\n            }else{\r\n                return 0;\r\n            }\r\n        }\r\n    }else{\r\n        if(!strcmp(str,\"sx\")){\r\n            if(is_pedina(*t,p1->arr[np].r-1,p1->arr[np].c-(p1->arr[np].dim+3),(p1->arr[np].dim+3))){\r\n                if((p1->arr[np].r-2 >= 0)&&(p1->arr[np].r-2<t->r)&&(p1->arr[np].c-((p1->arr[np].dim+3)*2) >= 0)&&(p1->arr[np].c-((p1->arr[np].dim+3)*2) < t->c)){\r\n                    if(!is_pedina(*t,p1->arr[np].r-2,p1->arr[np].c-((p1->arr[np].dim+3)*2),(p1->arr[np].dim+3))){\r\n                        mangia_p1(p1,p2,str,np,*t);\r\n                        return 1;\r\n                    }else{\r\n                        return 0;\r\n                    }\r\n                }else{\r\n                    return 0;\r\n                }\r\n            }else{\r\n                if((p1->arr[np].r-1 >= 0)&&(p1->arr[np].r-1<t->r)&&(p1->arr[np].c-(p1->arr[np].dim+3) >= 0)&&(p1->arr[np].c-(p1->arr[np].dim+3)< t->c)){\r\n                    togli_pedina(t,p1->arr[np].r,p1->arr[np].c,(p1->arr[np].dim+3));\r\n                    --p1->arr[np].r;\r\n                    p1->arr[np].c -= (p1->arr[np].dim+3);\r\n                    if(p1->arr[np].r == 0){\r\n                        aggiungi_pedina(p1,np,p1->arr[np].app);\r\n                    }\r\n                    return 1;\r\n                }else{\r\n                    return 0;\r\n                }\r\n            }\r\n        }\r\n        if(!strcmp(str,\"bassodx\")){\r\n            if(is_pedina(*t,p1->arr[np].r+1,p1->arr[np].c+(p1->arr[np].dim+3),(p1->arr[np].dim+3))){\r\n                if((p1->arr[np].r+2 >= 0)&&(p1->arr[np].r+2<t->r)&&(p1->arr[np].c+((p1->arr[np].dim+3)*3-1) >= 0)&&(p1->arr[np].c+((p1->arr[np].dim+3)*3-1)< t->c)&&(p1->arr[np].grado > 1)){\r\n                    if(!is_pedina(*t,p1->arr[np].r+2,p1->arr[np].c+((p1->arr[np].dim+3)*2),(p1->arr[np].dim+3))){\r\n                        mangia_p1(p1,p2,str,np,*t);\r\n                        return 1;\r\n                    }else{\r\n                        return 0;\r\n                    }\r\n                }else{\r\n                    return 0;\r\n                }\r\n            }else{\r\n                if((p1->arr[np].r+1 >= 0)&&(p1->arr[np].r+1<t->r)&&(p1->arr[np].c+(p1->arr[np].dim+3) >= 0)&&(p1->arr[np].c+(p1->arr[np].dim+3) < t->c)&&(p1->arr[np].grado > 1)){\r\n                    togli_pedina(t,p1->arr[np].r,p1->arr[np].c,(p1->arr[np].dim+3));\r\n                    p1->arr[np].r++;\r\n                    p1->arr[np].c += (p1->arr[np].dim+3);\r\n                    if(p1->arr[np].r == 0){\r\n                        aggiungi_pedina(p1,np,p1->arr[np].app);\r\n                    }\r\n                    return 1;\r\n                }else{\r\n                    return 0;\r\n                }\r\n            }\r\n        }\r\n        if(!strcmp(str,\"bassosx\")){\r\n            if(is_pedina(*t,p1->arr[np].r+1,p1->arr[np].c-(p1->arr[np].dim+3),(p1->arr[np].dim+3))){\r\n                if((p1->arr[np].r+2 >= 0)&&(p1->arr[np].r+2<t->r)&&(p1->arr[np].c-((p1->arr[np].dim+3)*2) >= 0)&&(p1->arr[np].c-((p1->arr[np].dim+3)*2)< t->c)&&(p1->arr[np].grado > 1)){\r\n                    if(!is_pedina(*t,p1->arr[np].r+2,p1->arr[np].c-((p1->arr[np].dim+3)*2),(p1->arr[np].dim+3))){\r\n                        mangia_p1(p1,p2,str,np,*t);\r\n                        return 1;\r\n                    }else{\r\n                        return 0;\r\n                    }\r\n                }else{\r\n                    return 0;\r\n                }\r\n            }else{\r\n                if((p1->arr[np].r+1 >= 0)&&(p1->arr[np].r+1<t->r)&&(p1->arr[np].c-(p1->arr[np].dim+3) >= 0)&&(p1->arr[np].c-(p1->arr[np].dim+3) < t->c)&&(p1->arr[np].grado > 1)){\r\n                    togli_pedina(t,p1->arr[np].r,p1->arr[np].c,(p1->arr[np].dim+3));\r\n                    p1->arr[np].r++;\r\n                    p1->arr[np].c -= (p1->arr[np].dim+3);\r\n                    if(p1->arr[np].r == 0){\r\n                        aggiungi_pedina(p1,np,p1->arr[np].app);\r\n                    }\r\n                    return 1;\r\n                }else{\r\n                    return 0;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return 0;\r\n}\r\nunsigned int mangia_p2(tplayer *p1,tplayer *p2,char *str,unsigned int np,tcampo t){\r\n\r\n    if(!strcmp(str,\"sx\")){\r\n        int x,y,z;\r\n        x = p2->arr[np].r+1;\r\n        y = p2->arr[np].c-(p2->arr[np].dim+3);\r\n        z = ricerca_pl(*p1,*p2,x,y);\r\n        if((z == 2) || (!z)){\r\n            return 0;\r\n        }else{\r\n            unsigned int num;\r\n            num = convert(t,p2->arr[np].r+1,p2->arr[np].c-1,2+p2->arr[np].dim);\r\n            if(p2->arr[np].grado < 3){\r\n                p2->arr[np].et[p2->arr[np].cima] = p1->arr[num].et[p1->arr[num].cima+1];\r\n                --p2->arr[np].cima;\r\n                p2->arr[np].grado++;\r\n                p1->arr[num].cima++;\r\n                --p1->arr[num].grado;\r\n                p1->arr[num].et[p1->arr[num].cima]= ' ';\r\n                p2->arr[np].r += 2;\r\n                p2->arr[np].c -= ((p2->arr[np].dim+3)*2);\r\n            }else{\r\n                char c;\r\n                c = p1->arr[num].et[p2->arr[num].cima+1];\r\n                aggiungi_pedina(p2,np,c);\r\n                p1->arr[num].cima++;\r\n                --p1->arr[num].grado;\r\n                p1->arr[num].et[p2->arr[num].cima]= ' ';\r\n                p2->arr[np].r += 2;\r\n                p2->arr[np].c -= ((p2->arr[np].dim+3)*2);\r\n            }\r\n            if(p1->arr[num].grado == 0){\r\n                togli_pedina(&t,p2->arr[np].r-1,p2->arr[np].c+(p2->arr[np].dim+3),(p2->arr[np].dim+3));\r\n\r\n            }\r\n            togli_pedina(&t,p2->arr[np].r-2,p2->arr[np].c+((p2->arr[np].dim+3)*2),(p2->arr[np].dim+3));\r\n            return 1;\r\n        }\r\n\r\n    }\r\n    if(!strcmp(str,\"dx\")){\r\n        unsigned int x,y,z = 0;\r\n        x = p2->arr[np].r+1;\r\n        y = p2->arr[np].c+(p2->arr[np].dim+3);\r\n        z = ricerca_pl(*p1,*p2,x,y);\r\n        if((z == 2) || (!z)){\r\n            return 0;\r\n        }else{\r\n            unsigned int num ;\r\n            num = convert(t,p2->arr[np].r+1,p2->arr[np].c+((p2->arr[np].dim+3)*2-1),2+p2->arr[np].dim);\r\n            if(p2->arr[np].grado < 3){\r\n                p2->arr[np].et[p2->arr[np].cima] = p1->arr[num].et[p1->arr[num].cima+1];\r\n                --p2->arr[np].cima;\r\n                p2->arr[np].grado++;\r\n                p1->arr[num].cima++;\r\n                --p1->arr[num].grado;\r\n                p1->arr[num].et[p1->arr[num].cima]= ' ';\r\n                p2->arr[np].r += 2;\r\n                p2->arr[np].c += ((p2->arr[np].dim+3)*2);\r\n            }else{\r\n                char c;\r\n                c = p1->arr[num].et[p2->arr[num].cima+1];\r\n                aggiungi_pedina(p2,np,c);\r\n                p1->arr[num].cima++;\r\n                --p1->arr[num].grado;\r\n                p1->arr[num].et[p2->arr[num].cima]= ' ';\r\n                p2->arr[np].r += 2;\r\n                p2->arr[np].c += ((p2->arr[np].dim+3)*2);\r\n            }\r\n            if(p1->arr[num].grado == 0){\r\n                togli_pedina(&t,p2->arr[np].r-1,p2->arr[np].c-(p2->arr[np].dim+3),(p2->arr[np].dim+3));\r\n\r\n            }\r\n            togli_pedina(&t,p2->arr[np].r-2,p2->arr[np].c-((p2->arr[np].dim+3)*2),(p2->arr[np].dim+3));\r\n            return 1;\r\n        }\r\n\r\n    }\r\n    if(!strcmp(str,\"bassosx\")){\r\n        int x,y,z;\r\n        x = p2->arr[np].r-1;\r\n        y = p2->arr[np].c-(p2->arr[np].dim+3);\r\n        z = ricerca_pl(*p1,*p2,x,y);\r\n        if((z == 2) || (!z)){\r\n            return 0;\r\n        }else{\r\n            unsigned int num;\r\n            num = convert(t,p2->arr[np].r-1,p2->arr[np].c-1,2+p2->arr[np].dim);\r\n            if(p2->arr[np].grado < 3){\r\n                p2->arr[np].et[p2->arr[np].cima] = p1->arr[num].et[p1->arr[num].cima+1];\r\n                --p2->arr[np].cima;\r\n                p2->arr[np].grado++;\r\n                p1->arr[num].cima++;\r\n                --p1->arr[num].grado;\r\n                p1->arr[num].et[p1->arr[num].cima]= ' ';\r\n                p2->arr[np].r -= 2;\r\n                p2->arr[np].c -= ((p2->arr[np].dim+3)*2);\r\n            }else{\r\n                char c;\r\n                c = p1->arr[num].et[p2->arr[num].cima+1];\r\n                aggiungi_pedina(p2,np,c);\r\n                p1->arr[num].cima++;\r\n                --p1->arr[num].grado;\r\n                p1->arr[num].et[p2->arr[num].cima]= ' ';\r\n                p2->arr[np].r -= 2;\r\n                p2->arr[np].c -= ((p2->arr[np].dim+3)*2);\r\n            }\r\n            if(p1->arr[num].grado == 0){\r\n                togli_pedina(&t,p2->arr[np].r+1,p2->arr[np].c+(p2->arr[np].dim+3),(p2->arr[np].dim+3));\r\n\r\n            }\r\n            togli_pedina(&t,p2->arr[np].r+2,p2->arr[np].c+((p2->arr[np].dim+3)*2),(p2->arr[np].dim+3));\r\n            return 1;\r\n        }\r\n\r\n    }\r\n    if(!strcmp(str,\"bassodx\")){\r\n        int x,y,z;\r\n        x = p2->arr[np].r-1;\r\n        y = p2->arr[np].c+(p2->arr[np].dim+3);\r\n        z = ricerca_pl(*p1,*p2,x,y);\r\n        if((z == 2) || (!z)){\r\n            return 0;\r\n        }else{\r\n            unsigned int num;\r\n            num = convert(t,p2->arr[np].r-1,p2->arr[np].c+((p2->arr[np].dim+3)*2-1),2+p2->arr[np].dim);\r\n            if(p2->arr[np].grado < 3){\r\n                p2->arr[np].et[p2->arr[np].cima] = p1->arr[num].et[p1->arr[num].cima+1];\r\n                --p2->arr[np].cima;\r\n                p2->arr[np].grado++;\r\n                p1->arr[num].cima++;\r\n                --p1->arr[num].grado;\r\n                p1->arr[num].et[p1->arr[num].cima]= ' ';\r\n                p2->arr[np].r -= 2;\r\n                p2->arr[np].c += ((p2->arr[np].dim+3)*2);\r\n            }else{\r\n                char c;\r\n                c = p1->arr[num].et[p2->arr[num].cima+1];\r\n                aggiungi_pedina(p2,np,c);\r\n                p1->arr[num].cima++;\r\n                --p1->arr[num].grado;\r\n                p1->arr[num].et[p2->arr[num].cima]= ' ';\r\n                p2->arr[np].r -= 2;\r\n                p2->arr[np].c += ((p2->arr[np].dim+3)*2);\r\n            }\r\n            if(p1->arr[num].grado == 0){\r\n                togli_pedina(&t,p2->arr[np].r+1,p2->arr[np].c-(p2->arr[np].dim+3),(p2->arr[np].dim+3));\r\n\r\n            }\r\n            togli_pedina(&t,p2->arr[np].r+2,p2->arr[np].c-((p2->arr[np].dim+3)*2),(p2->arr[np].dim+3));\r\n            return 1;\r\n        }\r\n\r\n    }\r\n\r\n    return 0;\r\n}\r\nunsigned int sposta_p2(tplayer *p2,unsigned int np,char *str,tcampo *t,tplayer *p1){\r\n\r\n    if(!strcmp(str,\"sx\")){\r\n        if(is_pedina(*t,p2->arr[np].r+1,p2->arr[np].c-(p2->arr[np].dim+3),(p2->arr[np].dim+3))){\r\n            if((p2->arr[np].r+2 >= 0)&&(p2->arr[np].r+2<t->r)&&(p2->arr[np].c-((p2->arr[np].dim+3)*2) >= 0)&&(p2->arr[np].c-((p2->arr[np].dim+3)*2)< t->c)){\r\n                if(!is_pedina(*t,p2->arr[np].r+2,p2->arr[np].c-((p2->arr[np].dim+3)*2),(p2->arr[np].dim+3))){\r\n                    mangia_p2(p1,p2,str,np,*t);\r\n                    return 1;\r\n                }else{\r\n                    return 0;\r\n                }\r\n            }else{\r\n                return 0;\r\n            }\r\n        }else{\r\n            if((p2->arr[np].r+1 >= 0)&&(p2->arr[np].r+1<t->r)&&(p2->arr[np].c-(p2->arr[np].dim+3) >= 0)&&(p2->arr[np].c-(p2->arr[np].dim+3) < t->c)){\r\n                togli_pedina(t,p2->arr[np].r,p2->arr[np].c,(p2->arr[np].dim+3));\r\n                p2->arr[np].r++;\r\n                p2->arr[np].c -= (p2->arr[np].dim+3);\r\n                if(p2->arr[np].r == 0){\r\n                    aggiungi_pedina(p2,np,p2->arr[np].app);\r\n                }\r\n                return 1;\r\n            }else{\r\n                return 0;\r\n            }\r\n        }\r\n    }\r\n    if(!strcmp(str,\"dx\")){\r\n        if(is_pedina(*t,p2->arr[np].r+1,p2->arr[np].c+(p2->arr[np].dim+3),(p2->arr[np].dim+3))){\r\n            if((p2->arr[np].r+2 >= 0)&&(p2->arr[np].r+2<t->r)&&(p2->arr[np].c+((p2->arr[np].dim+3)*3-1) >= 0)&&(p2->arr[np].c+((p2->arr[np].dim+3)*3-1)< t->c)){\r\n                if(!is_pedina(*t,p2->arr[np].r+2,p2->arr[np].c+((p2->arr[np].dim+3)*2),(p2->arr[np].dim+3))){\r\n                    mangia_p2(p1,p2,str,np,*t);\r\n                    return 1;\r\n                }else{\r\n                    return 0;\r\n                }\r\n            }else{\r\n                return 0;\r\n            }\r\n        }else{\r\n            if((p2->arr[np].r+1 >= 0)&&(p2->arr[np].r+1<t->r)&&(p2->arr[np].c+(p2->arr[np].dim+3) >= 0)&&(p2->arr[np].c+(p2->arr[np].dim+3) < t->c)){\r\n                togli_pedina(t,p2->arr[np].r,p2->arr[np].c,(p2->arr[np].dim+3));\r\n                p2->arr[np].r++;\r\n                p2->arr[np].c += (p2->arr[np].dim+3);\r\n                if(p2->arr[np].r == 0){\r\n                    aggiungi_pedina(p2,np,p2->arr[np].app);\r\n                }\r\n                return 1;\r\n            }else{\r\n                return 0;\r\n            }\r\n        }\r\n    }\r\n    if(!strcmp(str,\"bassosx\")){\r\n        if(is_pedina(*t,p2->arr[np].r-1,p2->arr[np].c-(p2->arr[np].dim+3),(p2->arr[np].dim+3))){\r\n            if((p2->arr[np].r-2 >= 0)&&(p2->arr[np].r-2<t->r)&&(p2->arr[np].c-((p2->arr[np].dim+3)*2) >= 0)&&(p2->arr[np].c-((p2->arr[np].dim+3)*2)< t->c)&&(p2->arr[np].grado > 1)){\r\n                if(!is_pedina(*t,p2->arr[np].r-2,p2->arr[np].c-((p2->arr[np].dim+3)*2),(p2->arr[np].dim+3))){\r\n                    mangia_p2(p1,p2,str,np,*t);\r\n                    return 1;\r\n                }else{\r\n                    return 0;\r\n                }\r\n            }else{\r\n                return 0;\r\n            }\r\n        }else{\r\n            if((p2->arr[np].r-1 >= 0)&&(p2->arr[np].r-1<t->r)&&(p2->arr[np].c-(p2->arr[np].dim+3) >= 0)&&(p2->arr[np].c-(p2->arr[np].dim+3) < t->c)&&(p2->arr[np].grado > 1)){\r\n                togli_pedina(t,p2->arr[np].r,p2->arr[np].c,(p2->arr[np].dim+3));\r\n                p2->arr[np].r--;\r\n                p2->arr[np].c -= (p2->arr[np].dim+3);\r\n                if(p2->arr[np].r == 0){\r\n                    aggiungi_pedina(p2,np,p2->arr[np].app);\r\n                }\r\n                return 1;\r\n            }else{\r\n                return 0;\r\n            }\r\n        }\r\n    }\r\n    if(!strcmp(str,\"bassodx\")){\r\n        if(is_pedina(*t,p2->arr[np].r-1,p2->arr[np].c+(p2->arr[np].dim+3),(p2->arr[np].dim+3))){\r\n            if((p2->arr[np].r-2 >= 0)&&(p2->arr[np].r-2<t->r)&&(p2->arr[np].c+((p2->arr[np].dim+3)*3-1) >= 0)&&(p2->arr[np].c+((p2->arr[np].dim+3)*3-1)< t->c)&&(p2->arr[np].grado > 1)){\r\n                if(!is_pedina(*t,p2->arr[np].r-2,p2->arr[np].c+((p2->arr[np].dim+3)*2),(p2->arr[np].dim+3))){\r\n                    mangia_p2(p1,p2,str,np,*t);\r\n                    return 1;\r\n                }else{\r\n                    return 0;\r\n                }\r\n            }else{\r\n                return 0;\r\n            }\r\n        }else{\r\n            if((p2->arr[np].r-1 >= 0)&&(p2->arr[np].r-1<t->r)&&(p2->arr[np].c+(p2->arr[np].dim+3) >= 0)&&(p2->arr[np].c+(p2->arr[np].dim+3) < t->c)&&(p2->arr[np].grado > 1)){\r\n                togli_pedina(t,p2->arr[np].r,p2->arr[np].c,(p2->arr[np].dim+3));\r\n                p2->arr[np].r--;\r\n                p2->arr[np].c += (p2->arr[np].dim+3);\r\n                if(p2->arr[np].r == 0){\r\n                    aggiungi_pedina(p2,np,p2->arr[np].app);\r\n                }\r\n                return 1;\r\n            }else{\r\n                return 0;\r\n            }\r\n        }\r\n    }\r\n    return 0;\r\n}\r\nunsigned int is_victory(tplayer p1,tplayer p2){\r\n    int i,v1 = 0,v2 = 0,flag = -1 ;\r\n    for(i = 0 ; i < p1.dim ; ++i){\r\n        p1.arr[i].grado == 0 ? ++v1 : v1;\r\n    }\r\n    if(v1 == p1.dim){\r\n        v1 = 1;\r\n    }else{\r\n        v1 = 0 ;\r\n    }\r\n\r\n    for(i = 0 ; i < p2.dim ; ++i){\r\n        p2.arr[i].grado == 0 ? ++v2 : v2;\r\n    }\r\n    if(v2 == p2.dim){\r\n        v2 = 2;\r\n    }else{\r\n        v2 = 0 ;\r\n    }\r\n    if(v1 == v2){\r\n        flag = 0;\r\n    }else{\r\n        v1 > v2 ? flag = 1 : flag;\r\n        v2 > v1 ? flag = 2 : flag;\r\n    }\r\n    return flag;\r\n}\r\nunsigned int scelta_turno(){\r\n    char str[2];\r\n\r\n    printf(\"Inizia il turno come da predefinito (quindi primo giocatore)? \");\r\n    scanf(\"%s\",str);\r\n    if((!strcmp(str,\"si\"))||(!strcmp(str,\"Si\"))||(!strcmp(str,\"SI\"))){\r\n        return 1;\r\n    }else{\r\n        printf(\"Lancio monetina ? \");\r\n        scanf(\"%s\",str);\r\n        if((!strcmp(str,\"si\"))||(!strcmp(str,\"Si\"))||(!strcmp(str,\"SI\"))){\r\n            int x = 0 ;\r\n            srand(time(NULL));\r\n            while(x == 0){\r\n                x = rand()%10;\r\n            }\r\n            if(x%2 == 0){\r\n                x = 1;\r\n            }else{\r\n                x = 2;\r\n            }\r\n            return x;\r\n        }\r\n    }\r\n    return 1;\r\n}\r\nunsigned int turno_player1(tplayer *p1,tplayer *p2,tcampo *t){\r\n    char str[10];\r\n    unsigned int np,y = 0;\r\n\r\n    printf(\"Turno player 1 : \\n\");\r\n    stampa_campo(*t,(p1->arr[0].dim+3));\r\n\r\n    printf(\"Vuoi uscire dal gioco ? \");\r\n    scanf(\"%s\",str);\r\n    if((!strcmp(str,\"si\"))||(!strcmp(str,\"Si\"))||(!strcmp(str,\"SI\"))){\r\n        return 1;\r\n    }\r\n\r\n\r\n    printf(\"Numero di pedina da selezionare : \");\r\n    scanf(\"%u\",&np);\r\n    printf(\"Vuoi selezionare questa pedina %d ? \",np);\r\n    scanf(\"%s\",str);\r\n\r\n    while((!strcmp(str,\"no\"))||(!strcmp(str,\"NO\"))||(!strcmp(str,\"No\"))){\r\n        printf(\"Numero di pedina da selezionare : \");\r\n        scanf(\"%u\",&np);\r\n        printf(\"Vuoi selezionare questa pedina %d ? \",np);\r\n        scanf(\"%s\",str);\r\n    }\r\n\r\n    while(y==0){\r\n        printf(\"Verso che direzione vuoi spostare la pedina ? \");\r\n        scanf(\"%s\",str);\r\n        y = sposta_p1(p1,np,str,t,p2);\r\n    }\r\n    aggiorna_campo(t,*p1,*p2);\r\n    stampa_campo(*t,(p1->arr[0].dim+3));\r\n\r\n    return 0;\r\n}\r\nunsigned int turno_player2(tplayer *p1,tplayer *p2,tcampo *t){\r\n    char str[10];\r\n    unsigned int np,y = 0;\r\n\r\n    printf(\"Turno player 2 : \\n\");\r\n    stampa_campo_inv(*t,(p2->arr[0].dim+3));\r\n\r\n    printf(\"Vuoi uscire dal gioco ? \");\r\n    scanf(\"%s\",str);\r\n    if((!strcmp(str,\"si\"))||(!strcmp(str,\"Si\"))||(!strcmp(str,\"SI\"))){\r\n        return 1;\r\n    }\r\n\r\n\r\n    printf(\"Numero di pedina da selezionare : \");\r\n    scanf(\"%u\",&np);\r\n    printf(\"Vuoi selezionare questa pedina %d ? \",np);\r\n    scanf(\"%s\",str);\r\n\r\n    while((!strcmp(str,\"no\"))||(!strcmp(str,\"NO\"))||(!strcmp(str,\"No\"))){\r\n        printf(\"Numero di pedina da selezionare : \");\r\n        scanf(\"%u\",&np);\r\n        printf(\"Vuoi selezionare questa pedina %d ? \",np);\r\n        scanf(\"%s\",str);\r\n    }\r\n\r\n\r\n    while(y==0){\r\n        printf(\"Verso che direzione vuoi spostare la pedina ? \");\r\n        scanf(\"%s\",str);\r\n        printf(\"%d\\n\",y);\r\n        y = sposta_p2(p2,np,str,t,p1);\r\n    }\r\n    aggiorna_campo(t,*p1,*p2);\r\n    stampa_campo_inv(*t,(p2->arr[np].dim+3));\r\n\r\n    return 0;\r\n}\r\n\r\nvoid setRed () {\r\n  printf(\"\\033[1;31m\");\r\n}\r\n\r\nvoid setYellow (){\r\n  printf(\"\\033[1;33m\");\r\n}\r\n\r\nvoid resetColor () {\r\n  printf(\"\\033[0m\");\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- supporto.c	(revision 1515aae80b606aa8eeb4e0e0ca2aabd9b594a488)
+++ supporto.c	(date 1606913949275)
@@ -1155,4 +1155,15 @@
   printf("\033[0m");
 }
 
+int is_empty(tplayer p){
+    int pos = -1;
+    unsigned int i;
+    for(i = 0 ; (i < p.dim)||(pos == -1);++i){
+        if(p.arr[i].grado == 0){
+            pos = i;
+        }
 
+    }
+    return pos;
+
+}
Index: main.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#include <stdio.h>\r\n#include \"supporto.h\"\r\n#include <math.h>\r\n\r\nint main(){\r\n    tcampo *t;\r\n    tplayer *p1 = NULL, *p2 = NULL;\r\n    int exit = 0, turno, round = 0;\r\n    int cifre, conta = 0, numped = 0;\r\n    int nBoard;\r\n\r\n    printf(\"Creazione campo\\nDimensione scacchiera? : \");\r\n    scanf(\"%d\", &nBoard);\r\n\r\n   printf(\"Numero pedine ? : \");\r\n   scanf(\"%d\",&cifre);\r\n   numped = cifre;\r\n   if(cifre > 0){\r\n       while(cifre != 0){\r\n           cifre /= 10;\r\n           ++conta;\r\n       }\r\n       if(pow(10,conta-1) == numped){\r\n           --conta;\r\n       }\r\n       printf(\"- Numero cifre %d\\n\",conta);\r\n\r\n       t = crea_campo(nBoard, nBoard, 3+conta);\r\n       inizializza_campo(t,3+conta);\r\n\r\n\r\n\r\n       p1 = crea_pedine(numped,'B',1,conta,*t);/* creare n pedine di carattere c */\r\n       p2 = crea_pedine(numped,'N',2,conta,*t);/* creare n pedine di carattere c */\r\n\r\n       aggiorna_campo(t,*p1,*p2);\r\n       printf(\"Campo di partenza : \\n\");\r\n       stampa_campo(*t,3+conta);\r\n\r\n\r\n       turno = scelta_turno();\r\n       printf(\"Il player che inizia è %d\\n\",turno);\r\n       while((exit == 0)&&(!is_victory(*p1,*p2))){\r\n           printf(\"Round numero : %d\\n\",round);\r\n           if(turno == 1){\r\n               exit = turno_player1(p1,p2,t);\r\n               turno = 2;\r\n           }else{\r\n               exit = turno_player2(p1,p2,t);\r\n               turno = 1;\r\n           }\r\n           ++round;\r\n       }\r\n       exit = is_victory(*p1,*p2);\r\n       printf(\"Il vincitore è il player %d!\\n\",exit);\r\n\r\n   }else{\r\n       printf(\"Non ha senso giocare con %u pedine !\\n\",cifre);\r\n   }\r\n\r\n    return 0;\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- main.c	(revision 1515aae80b606aa8eeb4e0e0ca2aabd9b594a488)
+++ main.c	(date 1606913949280)
@@ -33,6 +33,9 @@
        p1 = crea_pedine(numped,'B',1,conta,*t);/* creare n pedine di carattere c */
        p2 = crea_pedine(numped,'N',2,conta,*t);/* creare n pedine di carattere c */
 
+        stampa_player(*p1);
+        printf("%d\n",is_empty((*p1)));
+       /*
        aggiorna_campo(t,*p1,*p2);
        printf("Campo di partenza : \n");
        stampa_campo(*t,3+conta);
@@ -57,7 +60,7 @@
    }else{
        printf("Non ha senso giocare con %u pedine !\n",cifre);
    }
-
+    */
     return 0;
 
 }
