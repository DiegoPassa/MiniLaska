Index: src/user_interaction/user_interaction.c
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <math.h>\r\n#include <string.h>\r\n#include <time.h>\r\n#include <unistd.h>\r\n\r\n#include \"../colors/colors.h\"\r\n#include \"../game_engine/game_engine.h\"\r\n#include \"../ia/ia.h\"\r\n#include \"../memory_management/memory_management.h\"\r\n#include \"../movement/movement.h\"\r\n#include \"user_interaction.h\"\r\n\r\nvoid print_board(board_t t,unsigned int cifre, unsigned npl, char char_p1, char char_p2){\r\n    int i, j, k = 0, z, l;\r\n    char *topPl = (char*) malloc((t.n_cols)*sizeof(char));\r\n    int *cime = (int*) malloc((t.n_cols)*sizeof(int));\r\n    /* stampo prima riga */\r\n    printf(\" +\");\r\n    for(z = 0 ; z < cifre+2; ++z){ /* 2 = spazio a destra e sinistra */\r\n        printf(\"-\");\r\n    }\r\n    for(j=1; j<t.n_cols-cifre; j +=cifre){\r\n        printf(\"+\");\r\n        for(z = 0 ; z < cifre+2; ++z){ /* 2 = spazio a destra e sinistra */\r\n            printf(\"-\");\r\n        }\r\n    }\r\n    printf(\"+\");/* recupero angolo dx */\r\n    printf(\"\\n\");\r\n\r\n    /* parte centrale */\r\n    if(npl == 0){\r\n        i = 0;\r\n    }else{\r\n        i = t.n_rows-1;\r\n    }\r\n    while( (((npl == 0)&&(i < t.n_rows))||((npl == 1)&&(i >= 0))) ){\r\n        for (l = 0; l < t.n_cols; l+=cifre){\r\n            /* controllo dov'Ã¨ la cima */      \r\n            while (t.mat[i][l+k] != char_p2 && t.mat[i][l+k] != char_p1 && k<3){\r\n                k++;\r\n            }\r\n            cime[l/cifre] = k;\r\n            /* indica il possessore della torre */\r\n            topPl[l/cifre] = t.mat[i][l+k];\r\n            k=0;\r\n        }\r\n        \r\n        for (l = 0; l < 3; l++){\r\n            for(j=0; j<t.n_cols; j +=cifre){\r\n                if (j == 0){\r\n                    printf(\" |\");\r\n                }else{\r\n                    printf(\"|\");\r\n                }\r\n                \r\n                /* stampa le torri */\r\n                if (cime[j/cifre]==l){\r\n                    if (topPl[j/cifre] == char_p2 || topPl[j/cifre] == char_p1){                \r\n                        printf(BLK\"\");\r\n                        if (topPl[j/cifre] == char_p2){\r\n                            printColor(char_p2);\r\n                        }else if (topPl[j/cifre] == char_p1){\r\n                            printColor(char_p1);\r\n                        }\r\n                        printf(\" \");\r\n                        for (z = 0; z < cifre; z++){\r\n                            /*printf(\"%c\",t.mat[i][j+z]);*/ /* STAMPA CARATTERI DELLA MATRICE */\r\n                            if(t.mat[i][j+z] == char_p1){\r\n                                printf(\"%c\",'B');\r\n                            }else{\r\n                                if(t.mat[i][j+z] == char_p2){ /* STAMPA SEMPRE CARATTERI B/N A SECONDA DEL PLAYER*/\r\n                                    printf(\"%c\",'N');\r\n                                }else{\r\n                                    printf(\"%c\",t.mat[i][j+z]);\r\n                                }\r\n                            }\r\n                        }\r\n                        printf(\" \");\r\n                        printf(reset\"\");\r\n                    }\r\n                }else{\r\n                    if (cime[j/cifre]<l){\r\n                        if ((t.mat[i][j+l] == char_p1 || t.mat[i][j+l] == char_p2) && t.mat[i][j+l] != topPl[j/cifre]){\r\n                            if (topPl[j/cifre] == char_p2){\r\n                                printColor(char_p1);\r\n                            }else if (topPl[j/cifre] == char_p1){\r\n                                printColor(char_p2);\r\n                            }\r\n                            /* altrimenti stampa il colore del proprietario */\r\n                        }else{\r\n                            if (topPl[j/cifre] == char_p2){\r\n                                printColor(char_p2);\r\n                            }else if (topPl[j/cifre] == char_p1){\r\n                                printColor(char_p1);\r\n                            }\r\n                        }\r\n                        for(z = 0 ; z < cifre+2; ++z){\r\n                            printf(\" \");\r\n                        }\r\n                        printf(reset\"\");\r\n                    }    /* stampa le caselle bianche */\r\n                    else if (topPl[j/cifre] == '#' || (cime[j/cifre]!=3)){\r\n                        setWhite();\r\n                        for(z = 0 ; z < cifre+2; ++z){\r\n                            printf(\" \");\r\n                        }\r\n                        printf(reset\"\");\r\n                    }\r\n                    /* stampa le caselle nere */\r\n                    else{\r\n                        for(z = 0 ; z < cifre+2; ++z){\r\n                            printf(\" \");\r\n                        }\r\n                    }\r\n                }          \r\n            }\r\n            printf(\"|\\n\");\r\n        }\r\n        \r\n        /* stampa separatore tra righe */\r\n        if(((npl == 0)&&(i != t.n_rows-1))||((npl == 1)&&(i != 0))){\r\n            printf(\" |\");\r\n            for(j=0; j<t.n_cols; j +=cifre){\r\n                if(j != 0){\r\n                    printf(\"+\");\r\n                }\r\n                for(z = 0 ; z < cifre+2 ; ++z){\r\n                    printf(\"-\");\r\n                }\r\n            }\r\n            printf(\"|\\n\");\r\n        }\r\n\r\n        if(npl == 0){\r\n            ++i;\r\n        }else{\r\n            --i;\r\n        }\r\n    }\r\n\r\n    /* stampa la base */\r\n    printf(\" +\");\r\n    for(z = 0 ; z < cifre+2 ; ++z){\r\n        printf(\"-\");\r\n    }\r\n    for(j=1; j<t.n_cols-cifre; j +=cifre){\r\n        printf(\"+\");\r\n        for(z = 0 ; z < cifre+2 ; ++z){\r\n            printf(\"-\");\r\n        }\r\n    }\r\n    printf(\"+\");/* recupero angolo dx */\r\n    printf(\"\\n\");\r\n\r\n    free(cime);\r\n    free(topPl);\r\n}\r\n\r\nvoid print_player(player_t *players, unsigned int nPl){\r\n    unsigned int i,j;\r\n    for(i = 0 ; i < players[nPl].dim_pawns; ++i){\r\n        if (players[nPl].pawns[i].grade>0){\r\n            printf(\"Pedina = \");\r\n            for(j = 0 ; j < 3+players[nPl].pawns[i].dim_label+1 ;++j ){\r\n                printf(\"%c\",players[nPl].pawns[i].label[j]);\r\n            }\r\n            printf(\"\\n\");\r\n            if (players[nPl].pawns[i].isPromoted){\r\n                print_directions(players[nPl].pawns[i].canMove, 4, i);\r\n            }else\r\n            {\r\n                print_directions(players[nPl].pawns[i].canMove, 2, i);\r\n                \r\n            }       \r\n            printf(\"Cima = %d\\n\",players[nPl].pawns[i].cima);\r\n            printf(\"grade pedina : %d \\n\",players[nPl].pawns[i].grade);\r\n            printf(\"Posizione nel campo x: %d, y: %d\\n\",players[nPl].pawns[i].coordinate.x,players[nPl].pawns[i].coordinate.y);\r\n            /*printf(\"Posizione nel campo x: %d, y: %d\\n\",(x/6)+1,(y)+1);*/\r\n            printf(\"Promozione pedina : %u\\n\",players[nPl].pawns[i].isPromoted);\r\n            printf(\"\\n\");\r\n        }\r\n    }\r\n}\r\n\r\nunsigned int while_select_nPawn(player_t *players,unsigned int nPl){\r\n    unsigned int nPawn;\r\n    int scanfValue ;\r\n    printf(\" Select no. pawn to move : \");\r\n\r\n    printTextColor(players[nPl].color);\r\n    scanfValue = scanf(\"%u\", &nPawn);\r\n    if (scanfValue != 1) nPawn = checkInt(scanfValue);\r\n    printf(reset);\r\n\r\n    while(!check_while(players, nPl,nPawn) ){\r\n        unsigned int flag = 1;\r\n        if (nPl == 1 || nPl == 0 ){\r\n            flag = check_canMove(players, nPawn,nPl);\r\n        }\r\n        if(!flag){\r\n            printf(\" Pawn no. %u is unable to move!\\n\",nPawn);\r\n            printf(\" Select no. pawn to move : \");\r\n            printTextColor(players[nPl].color);\r\n            scanfValue = scanf(\"%u\", &nPawn);\r\n            if (scanfValue != 1) nPawn = checkInt(scanfValue);\r\n            printf(reset);\r\n        }\r\n\r\n    }\r\n    return nPawn;\r\n}\r\n\r\nunsigned int round_player(player_t *players, board_t *t, unsigned int nPl){\r\n    char str[10];\r\n    unsigned int num_Pawn = 0;\r\n    int y = -2;\r\n\r\n    update_board(t,players);\r\n    print_board(*t,(players[0].pawns[0].dim_label+3)+1,nPl, players[0].color, players[1].color);\r\n\r\n    printf(\" Surrender? (y/n): \");\r\n    printTextColor(players[nPl].color);\r\n    scanf(\"%s\",str);\r\n    printf(reset);\r\n    if((!strcmp(str,\"y\"))||(!strcmp(str,\"yes\"))||(!strcmp(str,\"Y\"))||(!strcmp(str,\"YES\"))){\r\n        return 3;\r\n    }\r\n\r\n    num_Pawn = while_select_nPawn(players,nPl);\r\n    printf(\" Confirm selection? (y/n): \");\r\n    printTextColor(players[nPl].color);\r\n    scanf(\"%s\",str);\r\n    printf(reset);\r\n\r\n    while((!strcmp(str,\"n\"))||(!strcmp(str,\"NO\"))||(!strcmp(str,\"No\")) ||(!strcmp(str,\"no\"))){\r\n        num_Pawn = while_select_nPawn(players,nPl);\r\n        printf(\" Confirm selection? (y/n): \");\r\n        printTextColor(players[nPl].color);\r\n        scanf(\"%s\",str);\r\n        printf(reset);\r\n    }\r\n\r\n    while(y==-2){\r\n        unsigned int tentativi = 3;\r\n        if(nPl == 1 || nPl == 0 ){\r\n            unsigned int index = 2;\r\n            players[nPl].pawns[num_Pawn].isPromoted ? index = 4 : index;\r\n            print_directions(players[nPl].pawns[num_Pawn].canMove,index,num_Pawn);\r\n        }\r\n        printf(\" Which direction you want to move? \");\r\n        printTextColor(players[nPl].color);\r\n        scanf(\"%s\",str);\r\n        printf(reset);\r\n        if(nPl == 1 || nPl == 0){\r\n            unsigned int index = 2;\r\n            players[nPl].pawns[num_Pawn].isPromoted ? index = 4 : index;\r\n            while(!check_directions(players[nPl].pawns[num_Pawn].canMove,index,str) && tentativi != 0){\r\n                printf(\" Number of attempts remained : %u\\n\",tentativi);\r\n                printf(\" Which direction you want to move? \");\r\n                printTextColor(players[nPl].color);\r\n                scanf(\"%s\",str);\r\n                printf(reset);\r\n                --tentativi;\r\n            }\r\n            if(!tentativi){\r\n                y = -3;\r\n            }\r\n        }\r\n        if(nPl == 0 && y != -3){\r\n            y = move_p1(players,num_Pawn,str,t,nPl);\r\n        }\r\n        if(nPl == 1 && y != -3){\r\n            y = move_p2(players, num_Pawn, str, t);\r\n        }\r\n        if(y < -1){\r\n            char temp[2];\r\n            y = -2;\r\n            printf(\" Select another pawn..\\n\");\r\n            num_Pawn = while_select_nPawn(players,nPl);\r\n\r\n            printf(\" Confirm selection? (y/n): \");\r\n            printTextColor(players[nPl].color);\r\n            scanf(\"%s\",temp);\r\n            printf(reset);\r\n\r\n            while((!strcmp(str,\"no\"))||(!strcmp(str,\"NO\"))||(!strcmp(str,\"No\"))){\r\n                num_Pawn = while_select_nPawn(players,nPl);\r\n                printf(\" Confirm selection? (y/n): \");\r\n                printTextColor(players[nPl].color);\r\n                scanf(\"%s\",str);\r\n                printf(reset);\r\n            }\r\n        }\r\n    }\r\n    update_board(t,players);\r\n    if(nPl == 1 || nPl == 0){\r\n        print_board(*t,(players[nPl].pawns[num_Pawn].dim_label+3)+1,1, players[0].color, players[1].color);\r\n    }\r\n\r\n    return 4;\r\n}\r\n\r\nunsigned int round_choice(){\r\n    int scanfValue;\r\n    char str[2];\r\n\r\n    printf(\" Start as first player? (y/n): \");\r\n    printf(YEL);\r\n    scanf(\"%s\",str);\r\n    printf(reset);\r\n    if((!strcmp(str,\"y\"))||(!strcmp(str,\"yes\"))||(!strcmp(str,\"Y\"))||(!strcmp(str,\"YES\"))){\r\n        return 0;\r\n    }else{\r\n        printf(\" Flip coin (y/n): ? \");\r\n        printf(YEL);\r\n        scanf(\"%s\",str);\r\n        printf(reset);\r\n        if((!strcmp(str,\"n\"))||(!strcmp(str,\"NO\"))||(!strcmp(str,\"No\")) ||(!strcmp(str,\"no\"))){\r\n            unsigned int npl = 0;\r\n            printf(\" Which player goes first? (1/2): \");\r\n            printf(YEL);\r\n            scanfValue = scanf(\"%u\", &npl);\r\n            if (scanfValue != 1){\r\n                npl = checkInt(scanfValue);\r\n            }\r\n            printf(reset);\r\n            while(npl != 1 && npl != 2){\r\n                printf(\" Invalid input..\\n Which player goes first? (1/2): \");\r\n                printf(YEL);\r\n                scanfValue = scanf(\"%u\", &npl);\r\n                if (scanfValue != 1){\r\n                    npl = checkInt(scanfValue);\r\n                }\r\n                printf(reset);\r\n            }\r\n\r\n            return npl-1;\r\n        }\r\n        if((!strcmp(str,\"y\"))||(!strcmp(str,\"yes\"))||(!strcmp(str,\"Y\"))||(!strcmp(str,\"YES\"))){\r\n            int x = 0 ;\r\n            srand(time(NULL));\r\n            while(x == 0){\r\n                x = rand()%10;\r\n            }\r\n            if(x%2 == 0){\r\n                x = 0;\r\n            }else{\r\n                x = 1;\r\n            }\r\n            return x;\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n\r\nint game(unsigned int gameMode){\r\n    board_t *t = NULL;\r\n    player_t *players = NULL;\r\n    int isCustom = 3, depth;\r\n    unsigned int exit = 4,turno = 0,round = 0;\r\n    unsigned int cifre,conta = 2,numped = 11;\r\n    int scanfValue = 1;\r\n\r\n    srand(time(0));\r\n\r\n    if (gameMode){\r\n        printf(\"\\n\\t\"MAG\"Select difficulty:\"reset\" \\n\\n\");\r\n        printf(\" [\"YEL\"1\"reset\"] \"GRN\"Easy\"reset\"   (random IA)\\n\");\r\n        printf(\" [\"YEL\"2\"reset\"] \"YEL\"Medium\"reset\" (low-depth minimax)\\n\");\r\n        printf(\" [\"YEL\"3\"reset\"] \"RED\"Hard\"reset\"   (high-depth minimax)\\n\");\r\n        printf(\" [\"YEL\"4\"reset\"] \"CYN\"Custom\"reset\" (custom-depth minimax)\\n\");\r\n        printf(\"\\n Selection: \");\r\n\r\n        printf(YEL);\r\n        scanfValue = scanf(\"%d\", &depth);\r\n        if (scanfValue != 1) depth = checkInt(scanfValue);\r\n        printf(reset);\r\n        while (depth > 4 || depth < 1){\r\n            printf(\"\\n Invalid selection.. try again: \");\r\n            printf(YEL);\r\n            scanfValue = scanf(\"%d\", &depth);\r\n            if (scanfValue != 1) depth = checkInt(scanfValue);\r\n            printf(reset);\r\n        }\r\n        \r\n        if (depth == 2){\r\n            depth = 5;\r\n            printf(\" Selected \"YEL\"medium\"reset\".\\n\");\r\n        }else if(depth == 3){\r\n            depth = 11;\r\n            printf(\" Selected \"RED\"hard\"reset\".\\n\");\r\n        }else if (depth == 4){\r\n            printf(\" Select depth: \");\r\n            printf(YEL);\r\n            scanfValue = scanf(\"%d\", &depth);\r\n            if (scanfValue != 1) depth = checkInt(scanfValue);\r\n            printf(reset);\r\n            while(depth%2 == 0 ){\r\n                printf(\" Depth must to be an odd number\\n\");\r\n                printf(\" Select depth: \");\r\n                printf(YEL);\r\n                scanfValue = scanf(\"%d\", &depth);\r\n                if (scanfValue != 1) depth = checkInt(scanfValue);\r\n                printf(reset);\r\n            }\r\n        }else{\r\n            depth = 0;\r\n            printf(\" Selected \"GRN\"easy\"reset\".\\n\");\r\n        }\r\n    \r\n    }\r\n    \r\n    printf(\"\\n\\t\"MAG\"Select gamemode:\"reset\"\\n\\n\");\r\n    printf(\" [\"YEL\"1\"reset\"] Classic (11 vs 11, board 7x7)\\n\");\r\n    printf(\" [\"YEL\"2\"reset\"] Custom\\n\");\r\n    printf(\"\\n Selection: \");\r\n\r\n    printf(YEL);\r\n    scanfValue = scanf(\"%d\", &isCustom);\r\n    if (scanfValue != 1) isCustom = checkInt(scanfValue);\r\n    printf(reset);\r\n    while ( (isCustom != 1) && (isCustom != 2) ){\r\n        printf(\"\\n Invalid selection.. try again: \");\r\n        printf(YEL);\r\n        scanfValue = scanf(\"%d\", &isCustom);\r\n        if (scanfValue != 1) isCustom = checkInt(scanfValue);\r\n        printf(reset);\r\n    }\r\n    \r\n    if(isCustom == 1){\r\n        t = create_board(7,7,3+conta+1);\r\n        initialize_board(t,3+conta+1);\r\n        players = create_pawns(11,'Y','R',conta,*t); /* create array[2] of player_t type */\r\n    }else{\r\n        unsigned int w,h,max_ped = 0;\r\n        char char_p1, char_p2;\r\n        conta = 0;\r\n        printf(\"\\n Board height : \");\r\n\r\n        printf(YEL);\r\n        scanfValue = scanf(\"%u\", &h);\r\n        if (scanfValue != 1) h = checkInt(scanfValue);\r\n        printf(reset);\r\n\r\n        printf(\" Board width : \");\r\n\r\n        printf(YEL);\r\n        scanfValue = scanf(\"%u\", &w);\r\n        if (scanfValue != 1) w = checkInt(scanfValue);\r\n        printf(reset);\r\n\r\n        while(w < 3 || h < 3){\r\n            printf(\" The board must be high and wide at least 3\\n\");\r\n            printf(\" Reselect board size.. \\n\");\r\n            printf(\" Board height : \");\r\n            printf(YEL);\r\n            scanfValue = scanf(\"%u\", &h);\r\n            if (scanfValue != 1) h = checkInt(scanfValue);\r\n            printf(reset);\r\n\r\n            printf(\" Board width : \");\r\n            printf(YEL);\r\n            scanfValue = scanf(\"%u\", &w);\r\n            if (scanfValue != 1) w = checkInt(scanfValue);\r\n            printf(reset);\r\n        }\r\n        max_ped = max_pawns(h,w);\r\n        printf(\" %u is the maximum number of pawns\\n\",max_ped);\r\n        printf(\" Select number of pawns : \");\r\n        printf(YEL);\r\n        scanfValue = scanf(\"%u\", &cifre);\r\n        if (scanfValue != 1) cifre = checkInt(scanfValue);\r\n        printf(reset);\r\n        while(cifre > max_ped){\r\n            printf(\" Reselect number of pawns : \");\r\n            printf(YEL);\r\n            scanfValue = scanf(\"%u\", &cifre);\r\n            if (scanfValue != 1) cifre = checkInt(scanfValue);\r\n            printf(reset);\r\n        }\r\n\r\n\r\n        numped = cifre;\r\n        \r\n        if(cifre > 0) {\r\n            while (cifre != 0) {\r\n                cifre /= 10;\r\n                ++conta;\r\n            }\r\n            if ((pow(10, conta - 1) == numped) && (numped != 1)) {\r\n                --conta;\r\n            }\r\n            t = create_board(h,w,3+conta+1);\r\n            initialize_board(t,3+conta+1);\r\n\r\n\r\n            printf(\"\\n [\" BLK REDB\" R \" reset \"] [\"BLK YELB\" Y \" reset \"] [\"BLK GRNB\" G \" reset \"] [\"BLK CYNB\" C \" reset \"] [\"BLK BLUB\" B \" reset \"] [\"BLK MAGB\" M \" reset \"]\\n\");\r\n\r\n            printf(\" Choose player 1 pawn color: \");\r\n            printf(YEL);\r\n            scanf(\"%s\", &char_p1);\r\n            printf(reset);\r\n            if(check_char_color(char_p1) == 2){\r\n                char temp;\r\n                temp = uppercase(char_p1);\r\n                char_p1 = temp;\r\n            }\r\n\r\n            printf(\" Choose player 2 pawn color: \");\r\n            printf(YEL);\r\n            scanf(\"%s\", &char_p2);\r\n            printf(reset);\r\n            if(check_char_color(char_p2) == 2){\r\n                char temp;\r\n                temp = uppercase(char_p2);\r\n                char_p2 = temp;\r\n            }\r\n\r\n            while(check_char_color(char_p1)!=1 || check_char_color(char_p2)!=1){\r\n                if(!check_char_color(char_p1) ){\r\n                    printf(\" Invalid input.. \\n Choose another color for player 1's pawns: \");\r\n                    printf(YEL);\r\n                    scanf(\"%s\", &char_p1);\r\n                    printf(reset);\r\n                }else{\r\n                    if(check_char_color(char_p1) == 2){\r\n                        char temp;\r\n                        temp = uppercase(char_p1);\r\n                        char_p1 = temp;\r\n                    }\r\n                }\r\n                if(!check_char_color(char_p2)){\r\n                    printf(\" Invalid input.. \\n Choose another color for player 2's pawns: \");\r\n                    printf(YEL);\r\n                    scanf(\"%s\", &char_p2);\r\n                    printf(reset);\r\n                }else{\r\n                    printf(\"%u\",check_char_color(char_p2));\r\n                    if(check_char_color(char_p2) == 2){\r\n                        char temp;\r\n                        temp = uppercase(char_p2);\r\n                        char_p2 = temp;\r\n                    }\r\n                }\r\n            }\r\n\r\n            players = create_pawns(numped,char_p1, char_p2, conta,*t);\r\n\r\n        }else{\r\n            printf(\" It doesn't have any sense playing with %d pawns\",cifre);\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    turno = round_choice();\r\n    printf(\"\\n Starting player is %u\\n\",turno+1);\r\n    while((exit == 4)&&(is_victory(players)>2)){\r\n        set_moves_pawn(players,t,0,-1);\r\n        set_moves_pawn(players,t,1,-1);\r\n        if( all_blocked(players,turno) ){\r\n            unsigned int turno_next = 1;\r\n            if(turno){\r\n                turno_next = 0;\r\n            }\r\n            if(all_blocked(players,turno_next)){\r\n                exit = 2;\r\n            }else{\r\n                exit = turno;\r\n            }\r\n        }\r\n        if(exit == 4){\r\n            printf(\" Round number : %u\\n\",round);\r\n            printTextColor(players[turno].color);\r\n            printf(\" Player %d turn\\n\", turno+1);\r\n            printf(reset);\r\n            if (turno == 0 ){\r\n                exit = round_player(players,t,turno);\r\n                turno = 1;\r\n            }else{\r\n                if (gameMode){\r\n                    if (depth == 0){\r\n                        exit = round_ia_random(players, t, turno);\r\n                    }else{\r\n                        exit = round_ia_minimax(players,t,turno, depth);\r\n                    }\r\n                }else{            \r\n                    exit = round_player(players,t,turno);\r\n                }\r\n                turno = 0;\r\n            }\r\n            /* print_player(players,0);\r\n            print_player(players,1); */\r\n            update_board(t, players);\r\n            print_board(*t, players[turno].pawns[0].dim_label+1+3, 0, players[0].color, players[1].color);\r\n            sleep(0);\r\n            ++round;\r\n        }\r\n    }\r\n    if(exit == 2){\r\n        printf(\" Both players are unable to move\\n\");\r\n    }\r\n    if(exit == 3){\r\n        printf(\" You left the game\\n\");\r\n        sleep(3);\r\n        system(\"clear\");\r\n    }else{\r\n        if(exit == 1 || exit  == 0){\r\n            ++exit;\r\n        }\r\n        if(exit == 4){\r\n            exit = is_victory(players);\r\n        }\r\n        printf(\" Total rounds : %u\\n\",round);\r\n        printf(\" Player %d won!\\n\",exit);\r\n    }\r\n\r\n    destroy_board(t);\r\n    destroy_player(players);\r\n\r\n    return 1;\r\n}\r\n\r\nint checkInt(int scanfValue){\r\n    int value = 0;\r\n    while(scanfValue != 1)\r\n    {\r\n        printf(RED\" Please enter an integer: \");\r\n        printf(YEL);\r\n        while(getchar() != '\\n');\r\n        scanfValue = scanf(\"%d\",&value);\r\n        printf(reset);\r\n    }\r\n    return value;\r\n}\r\n\r\nvoid menu(){\r\n    int choice = 0;\r\n    system(\"clear\");\r\n    printf(\" #886711 Diego    Passarella\\n\");\r\n    printf(\" #882082 Davide   Pasqual\\n\");\r\n    printf(\" #881493 Michelle Ravagnan\\n\");\r\n    printf(\"\\n +-+-+-+-+-+-+-+-+-+-+-+-+-+\\n\"\r\n             \" |\"RED\"M\"reset\"|\"YEL\"i\"reset\"|\"GRN\"n\"reset\"|\"CYN\"i\"reset\"| |\"BLU\"L\"reset\"|\"MAG\"a\"reset\"|\"RED\"s\"reset\"|\"YEL\"k\"reset\"|\"GRN\"a\"reset\"| |\"CYN\"5\"reset\"|\"BLU\"1\"reset\"|\\n\"\r\n             \" +-+-+-+-+-+-+-+-+-+-+-+-+-+\\n\");\r\n             \r\n    printf(\"\\n [\"YEL\"1\"reset\"] Player vs. Player\");\r\n    printf(\"\\n [\"YEL\"2\"reset\"] Player vs. IA\");\r\n    printf(\"\\n [\"YEL\"3\"reset\"] Exit\");\r\n    while(choice != 1 && choice != 2 && choice != 3){\r\n        int scanfValue;\r\n        printf(\"\\n\\n Select mode: \"YEL);\r\n        scanfValue = scanf(\"%d\", &choice);\r\n        printf(reset);\r\n        if (scanfValue != 1) choice = checkInt(scanfValue);\r\n        switch(choice){\r\n            case 1:\r\n                system(\"clear\");\r\n                printf(\"\\n Selected Player vs. Player\\n\");\r\n                game(0);\r\n                break;\r\n            case 2:\r\n                system(\"clear\");\r\n                printf(\"\\n Selected Player vs. IA\\n\");\r\n                game(1);\r\n                break;\r\n            case 3:\r\n                system(\"clear\");\r\n                break;\r\n            default:\r\n                printf(\"\\n INVALID SELECTION...Please try again\\n\");\r\n        };\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/user_interaction/user_interaction.c b/src/user_interaction/user_interaction.c
--- a/src/user_interaction/user_interaction.c	(revision d491ae6014441a6c19c51380afefcec3c30aefb9)
+++ b/src/user_interaction/user_interaction.c	(date 1611082347523)
@@ -508,7 +508,21 @@
                 temp = uppercase(char_p1);
                 char_p1 = temp;
             }
-
+            /* SUBSEQUENT MEASURES
+            while(check_char_color(char_p1)!=1 ){
+                if(!check_char_color(char_p1) ){
+                    printf(" Invalid input.. \n Choose another color for player 1's pawns: ");
+                    printf(YEL);
+                    scanf("%s", &char_p1);
+                    printf(reset);
+                }else{
+                    if(check_char_color(char_p1) == 2){
+                        char temp;
+                        temp = uppercase(char_p1);
+                        char_p1 = temp;
+                    }
+                }
+            }*/
             printf(" Choose player 2 pawn color: ");
             printf(YEL);
             scanf("%s", &char_p2);
@@ -518,7 +532,21 @@
                 temp = uppercase(char_p2);
                 char_p2 = temp;
             }
-
+            /* SUBSEQUENT MEASURES
+            while( (check_char_color(char_p2)!=1) || (char_p2 == char_p1) ){
+                if( !check_char_color(char_p2) || (char_p2 == char_p1) ){
+                    printf(" Invalid input.. \n Choose another color for player 2's pawns: ");
+                    printf(YEL);
+                    scanf("%s", &char_p2);
+                    printf(reset);
+                }else{
+                    if( (check_char_color(char_p2) == 2)){
+                        char temp;
+                        temp = uppercase(char_p2);
+                        char_p2 = temp;
+                    }
+                }
+            }*/
             while(check_char_color(char_p1)!=1 || check_char_color(char_p2)!=1){
                 if(!check_char_color(char_p1) ){
                     printf(" Invalid input.. \n Choose another color for player 1's pawns: ");
@@ -594,7 +622,7 @@
             /* print_player(players,0);
             print_player(players,1); */
             update_board(t, players);
-            print_board(*t, players[turno].pawns[0].dim_label+1+3, 0, players[0].color, players[1].color);
+            /*print_board(*t, players[turno].pawns[0].dim_label+1+3, 0, players[0].color, players[1].color);*/
             sleep(0);
             ++round;
         }
